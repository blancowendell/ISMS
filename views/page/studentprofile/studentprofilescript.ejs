<style>
  /* Hide the student ID initially */
  #student_id {
    display: none;
    /* Hide initially */
  }
</style>
<script>
  //let globalstudentid = '<%= studentid %>';
  $(document).ready(function () {
    loadStudentData();
    //LoadInstitutions();
    //LoadCoursesOnly();

    // document
    //   .getElementById("input-file-now")
    //   .addEventListener("change", function (event) {
    //     previewImage(event);
    //   });
    const toggleEye = $("#toggleEye");
    const studentIdElement = $("#student_id");

    // Get student ID from server-side (replace with your actual ID)
    let globalstudentid = '<%= studentid %>'; // This will be the actual student ID

    // Initially hide the student ID
    studentIdElement.text('******'); // Set to masked format
    let isMasked = true; // Track if the ID is masked

    toggleEye.on("click", function () {
      if (isMasked) {
        studentIdElement.text(globalstudentid); // Show the actual student ID
        studentIdElement.show(); // Show the element
        toggleEye.removeClass("fa-eye-slash").addClass("fa-eye"); // Change icon to eye
      } else {
        studentIdElement.text('******'); // Mask the student ID
        toggleEye.removeClass("fa-eye").addClass("fa-eye-slash"); // Change icon to eye-slash
      }
      isMasked = !isMasked; // Toggle the state
    });

    // Ensure the ID is hidden on initial load
    studentIdElement.hide(); // Initially hide the ID element

    // Show the masked format when the toggle is clicked
    toggleEye.on("click", function () {
      studentIdElement.show(); // Show the masked value when clicked
    });
    // Ensure the ID is displayed as masked on initial load
    studentIdElement.show();
    function previewImage(event) {
      const input = event.target;
      const reader = new FileReader();

      reader.onload = function () {
        const imagePreview = document.getElementById("image-preview");
        imagePreview.src = reader.result;
        imagePreview.style.display = "block";
      };

      if (input.files && input.files[0]) {
        reader.readAsDataURL(input.files[0]);
      }
    }

    // function LoadInstitutions() {
    //   $.ajax({
    //     type: "GET",
    //     url: "/institutions/loadinstitutions",
    //     success: function (result) {
    //       var data = result.data;

    //       $.each(data, function (key, item) {
    //         var options = new Option(item.institutionsid, item.institutionsid);
    //         $(options).html(item.name);
    //         $("#school_name").append(options);
    //       });
    //     },
    //     error: function (result) {
    //       alert("error: " + result.data);
    //     },
    //   });
    // }

    // function LoadCoursesOnly() {
    //   $.ajax({
    //     type: "GET",
    //     url: "/courses/loadcourses",
    //     success: function (result) {
    //       var data = result.data;
    //       $.each(data, function (key, item) {
    //         var options = new Option(item.course_id, item.course_id);
    //         $(options).html(item.name_code);
    //         $("#course_strand").append(options);
    //       });
    //     },
    //     error: function (result) {
    //       alert("error: " + result.data);
    //     },
    //   });
    // }

    function loadStudentData() {
      // Fetch initial application data
      $.ajax({
        type: "GET",
        url: "/finishapplication/load",
        success: function () {
          // Fetch student profile data
          $.ajax({
            type: "GET",
            url: "/studentprofile/studentprofileload",
            success: function (result) {
              if (result.msg === "success") {
                populateStudentFields(result.data);
              } else {
                swal("Error fetching student data", result.message, "error");
              }
            },
            error: function (err) {
              swal(
                "An error occurred while fetching student data",
                err.message,
                "error"
              );
            },
          });
        },
        error: function (err) {
          swal(
            "An error occurred while checking application status",
            err.message,
            "error"
          );
        },
      });
    }

    function populateStudentFields(existingData) {
      $.each(existingData, function (key, item) {
        $("#first_name").val(item.first_name);
        $("#middle_name").val(item.middle_name);
        $("#last_name").val(item.last_name);
        $("#dob").val(item.date_of_birth);
        $("#birthplace").val(item.birthplace);
        $("#phone").val(item.phone);
        $("#gender").val(item.gender);
        $("#age").val(item.age);
        $("#scholar_status").val(item.status);
        $("#student_id").text('******'); // Mask the student ID
        globalstudentid = item.studentid;
        $("#school_name").val(item.institutionid);
        $("#course_strand").val(item.courseid);
        $("#year_level").val(item.yearlevel);
        $("#academic_status").val(item.academic_status);
        $("#register_date").val(item.registerdate);
        $("#city").val(item.city);
        $("#barangay").val(item.baranggay);
        $("#village").val(item.village);
        $("#street_address").val(item.street);
        $("#houseno").val(item.house_no);
        $("#fathersname").val(item.fathers_name);
        $("#fathersmonthly").val(item.fathers_salary);
        $("#fathersoccupation").val(item.fathers_occupation);
        $("#mothersname").val(item.mothers_name);
        $("#mothersoccupation").val(item.mothers_occupation);
        $("#mothersmonthly").val(item.mothers_salary);
        $("#scholarshipid").text(item.scholarshipid);
        setImagePreview("#profileimagepreview", item.image);
        setImagePreview("#truecopypreview", item.grade_copy);
        setImagePreview("#regformpreview", item.registration_form);
        setImagePreview("#certrespreview", item.certificate_residency);
        setImagePreview("#itipreview", item.itr);
        setImagePreview("#nfipreview", item.nfi);
        handleFileButtons(
          item.grade_copy,
          "downloadTrueCopy",
          "truecopypreview",
          "previewTrueCopy",
          "TrueCopy"
        );
        handleFileButtons(
          item.registration_form,
          "downloadRegForm",
          "regformpreview",
          "previewRegForm",
          "RegistrationForm"
        );
        handleFileButtons(
          item.certificate_residency,
          "downloadCertRes",
          "certrespreview",
          "previewCertRes",
          "CertificateOfResidency"
        );
        handleFileButtons(
          item.itr,
          "downloadItr",
          "itipreview",
          "previewItr",
          "IncomeTaxReturn"
        );
        handleFileButtons(
          item.nfi,
          "downloadNfi",
          "nfipreview",
          "previewNfi",
          "AffidavitOfNoFixIncome"
        );
      });
    }
    function setImagePreview(selector, base64String) {
      $(selector).attr("src", "data:image/jpg;base64," + base64String);
    }
    function handleFileButtons(
      base64String,
      downloadButtonId,
      previewId,
      previewButtonId,
      fileName
    ) {
      const fileHeader = base64String.substring(0, 10);
      let fileType = "";
      let blobType = "";
      let fileExtension = "";

      if (fileHeader.includes("JVBER")) {
        // PDF file
        fileType = "pdf";
        blobType = "application/pdf";
        fileExtension = ".pdf";
      } else if (fileHeader.includes("/9j/4")) {
        // JPEG file
        fileType = "image/jpeg";
        blobType = "image/jpeg";
        fileExtension = ".jpg";
      } else if (fileHeader.includes("iVBORw0KG")) {
        // PNG file
        fileType = "image/png";
        blobType = "image/png";
        fileExtension = ".png";
      }

      if (fileType && blobType) {
        const byteCharacters = atob(base64String);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: blobType });
        const downloadLink = URL.createObjectURL(blob);

        // Set the preview image and download link
        if (fileType.startsWith("image")) {
          $(`#${previewId}`).attr("src", downloadLink).show();
        } else if (fileType === "pdf") {
          $(`#${previewId}`)
            .attr("src", "https://via.placeholder.com/250?text=PDF")
            .hide();
        }

        $(`#${downloadButtonId}`)
          .attr("href", downloadLink)
          .attr("download", `${fileName}${fileExtension}`)
          .show();

        // Handle preview button click
        $(`#${previewButtonId}`)
          .on("click", function () {
            window.open(downloadLink, "_blank");
          })
          .show();
      }
    }
  });
</script>